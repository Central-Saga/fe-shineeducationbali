"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Certificate } from "@/types/certificate";
import { certificateService } from "@/lib/services/certificate.service";

const formSchema = z.object({
  title: z.string().min(1, "Judul sertifikat harus diisi"),
  description: z.string().min(1, "Deskripsi harus diisi"),
  type: z.enum(["COURSE_COMPLETION", "ACHIEVEMENT", "PARTICIPATION"]),
  achievementDate: z.string().min(1, "Tanggal pencapaian harus diisi"),
  validUntil: z.string().optional(),
  "metadata.courseName": z.string().optional(),
  "metadata.grade": z.string().optional(),
  "metadata.achievementDetails": z.string().optional(),
  "signedBy.name": z.string().min(1, "Nama penandatangan harus diisi"),
  "signedBy.position": z.string().min(1, "Jabatan penandatangan harus diisi"),
});

interface CertificateFormDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  studentId: string;
  studentName: string;
  onSuccess?: () => void;
}

export function CertificateFormDialog({
  open,
  onOpenChange,
  studentId,
  studentName,
  onSuccess,
}: CertificateFormDialogProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      type: "COURSE_COMPLETION",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      setIsLoading(true);
      const certificateData = {
        studentId,
        recipientName: studentName, // Add recipient name from props
        status: "draft" as "draft" | "issued" | "pending", // Set initial status as draft
        previewUrl: "", // Will be generated by backend
        ...values,
        metadata: {
          courseName: values["metadata.courseName"],
          grade: values["metadata.grade"],
          achievementDetails: values["metadata.achievementDetails"],
        },
        signedBy: {
          name: values["signedBy.name"],
          position: values["signedBy.position"],
          signature: "", // TODO: Implement signature upload
        },
        templateId: "default", // TODO: Implement template selection
        issueDate: new Date().toISOString(),
      };

      await certificateService.createCertificate(certificateData);
      onSuccess?.();
      onOpenChange(false);
    } catch (error) {
      console.error("Failed to create certificate:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={isLoading ? undefined : onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Buat Sertifikat Baru</DialogTitle>
          <DialogDescription>
            Buat sertifikat untuk siswa: {studentName}
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Judul Sertifikat</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Contoh: Sertifikat Penyelesaian Kursus"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Jenis Sertifikat</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Pilih jenis sertifikat" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="COURSE_COMPLETION">
                        Penyelesaian Kursus
                      </SelectItem>
                      <SelectItem value="ACHIEVEMENT">Prestasi</SelectItem>
                      <SelectItem value="PARTICIPATION">Partisipasi</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Deskripsi</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Deskripsi pencapaian atau keterangan tambahan"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="achievementDate"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tanggal Pencapaian</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="validUntil"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Berlaku Sampai (Opsional)</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="metadata.courseName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nama Kursus (Opsional)</FormLabel>
                  <FormControl>
                    <Input placeholder="Nama kursus atau program" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="signedBy.name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nama Penandatangan</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Nama lengkap penandatangan"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="signedBy.position"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Jabatan Penandatangan</FormLabel>
                    <FormControl>
                      <Input placeholder="Contoh: Kepala Sekolah" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="flex justify-end space-x-2 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={isLoading}
              >
                Batal
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading ? "Menyimpan..." : "Simpan"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
